<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="studentOne" class="com.atwzs.spring.pojo.Student"></bean>

    <bean id="studentTwo" class="com.atwzs.spring.pojo.Student">
        <!-- setter注入
           property:通过成员变量的set方法进行赋值
           name:设置需要赋值的属性名（和set方法有关）
           value:设置为属性所赋的值
        -->
        <property name="sid" value="1001"></property>
        <property name="sname" value="张三"></property>
        <property name="age" value="23"></property>
        <property name="gender" value="男"></property>
    </bean>

    <bean id="studentThree" class="com.atwzs.spring.pojo.Student">
        <constructor-arg value="1002"></constructor-arg>
        <constructor-arg value="李四"></constructor-arg>
        <constructor-arg value="女"></constructor-arg>
        <constructor-arg value="23" name="age"></constructor-arg>
    </bean>

    <bean id="studentFour" class="com.atwzs.spring.pojo.Student">
        <property name="sid" value="1001"></property>
        <!--        大于小于号，在xml文档中用来定义标签的开始额结束，不能随便使用，会报错-->
        <!--        <property name="sname" value="<张三>"></property>-->
        <!--        解决方法1：用xml实体代替-->
        <!--        <property name="sname" value="&lt; 张三 &gt;"></property>-->
        <!--
        解决方法2：用CDATA节
        CDATA节其中的内容会原样解析，<![CDATA[...]]>
        CDATA节是xml中一个特殊的标签，因此不能写在一个属性中
        -->
        <property name="sname">
            <value><![CDATA[<王五>]]></value>
        </property>
        <property name="age" value="23"></property>
        <property name="gender">   <!--给某个属性赋null值的方法,并非是value="null"-->
            <null/>
        </property>
    </bean>

    <bean id="studentFive" class="com.atwzs.spring.pojo.Student">
        <property name="sid" value="1004"></property>
        <property name="sname" value="沈六"></property>
        <property name="age" value="10"></property>
        <property name="gender" value="女"></property>
        <!--        ref:引用IOC容器中某个bean的id
        <property name="clazz" ref="clazzOne"></property>
                级联的方式，要保证提前为clazz属性赋值或实例化
        <property name="clazz.cid" value="2222"></property>  clazz对象的属性修改
        <property name="clazz.cname" value="远大前程班"></property>  clazz对象的属性修改-->

        <property name="clazz">
            <!--            内部bean,只能在当前bean的内部使用，不能直接通过IOC容器获取-->
            <bean id="clazzInner" class="com.atwzs.spring.pojo.Clazz">
                <property name="cid" value="2222"></property>
                <property name="cname" value="远大前程班"></property>
            </bean>
        </property>
        <!--        数组类型-->
        <property name="hobby">
            <array>
                <value>唱</value>
                <value>跳</value>
                <value>rap</value>
                <value>篮球</value>
                <!--        引用类型作为数组元素<ref bean=""></ref>-->
            </array>
        </property>
        <!--<property name="teacherMap">
            <map>
                &lt;!&ndash;                一个entry表示一个键值对&ndash;&gt;
                <entry key="10086" value-ref="teacherOne"></entry>
                <entry key="10010" value-ref="teacherTwo"></entry>
            </map>
        </property>-->
        <!--        第二种方式-->
        <property name="teacherMap" ref="teacherMap"></property>
    </bean>

    <bean id="clazzOne" class="com.atwzs.spring.pojo.Clazz">
        <property name="cid" value="1111"></property>
        <property name="cname" value="最强王者班"></property>
        <!--        第一种方式-->
        <!--<property name="students">
            <list>
                &lt;!&ndash;                <array 为数组类型赋值&ndash;&gt;
                <ref bean="studentOne"></ref>
                <ref bean="studentTwo"></ref>
                <ref bean="studentThree"></ref>
            </list>
        </property>-->
        <!--        第二种方式-->
        <property name="students" ref="studentList"></property>
    </bean>

    <!--    配置一个集合类型的bean,需要使用util的约束-->
    <util:list id="studentList">
        <ref bean="studentOne"></ref>
        <ref bean="studentTwo"></ref>
        <ref bean="studentThree"></ref>
    </util:list>

    <!--    老师对象-->
    <bean id="teacherOne" class="com.atwzs.spring.pojo.Teacher">
        <property name="tid" value="10086"></property>
        <property name="tname" value="大宝"></property>
    </bean>

    <bean id="teacherTwo" class="com.atwzs.spring.pojo.Teacher">
        <property name="tid" value="10010"></property>
        <property name="tname" value="小宝"></property>
    </bean>

    <util:map id="teacherMap">
        <entry key="10086" value-ref="teacherOne"></entry>
        <entry key="10010" value-ref="teacherTwo"></entry>
    </util:map>

    <!--    依赖注入之p命名空间-->
    <bean id="studentSix" class="com.atwzs.spring.pojo.Student"
          p:sid="1005" p:sname="杨幂" p:teacherMap-ref="teacherMap">
    </bean>
</beans>