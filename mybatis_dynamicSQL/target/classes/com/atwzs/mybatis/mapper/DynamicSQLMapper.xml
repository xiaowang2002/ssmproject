<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atwzs.mybatis.mapper.DynamicSQLMapper">

    <!--
    动态SQL:
    1.if,通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
    -->
    <!--    List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByConditionOld" resultType="Emp">
        <!--        1=1解决sql错误-->
        select * from t_emp where 1=1
        <if test="empName!=null and empName !=''">
            and emp_name=#{empName}
        </if>
        <if test="age!=null and age !=''">
            and age=#{age}
        </if>
        <if test="gender!=null and gender !=''">
            and gender=#{gender}
        </if>
    </select>

    <select id="getEmpByConditionOld2" resultType="Emp">
        <!--
           where标签：
           1.若where标签中有条件成立，会自动生成where关键字
           2.会自动将where标签中内容前多余的and去掉,但是内容后的and无法去掉
           3.若where标签中没有任何一个条件成立，则where没有任何功能
           where标签功能强大
        -->
        select * from t_emp
        <where>
            <if test="empName!=null and empName !=''">
                and emp_name=#{empName}
            </if>
            <if test="age!=null and age !=''">
                and age=#{age}
            </if>
            <if test="gender!=null and gender !=''">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByCondition" resultType="Emp">
        <!--
        prefix,suffix:在标签中内容前面或后面添加指定内容
        prefixOverrides,suffixOverrides:在标签中内容前面或后面去掉指定内容
        -->
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName!=null and empName !=''">
                emp_name=#{empName} and
            </if>
            <if test="age!=null and age !=''">
                age=#{age} and
            </if>
            <if test="gender!=null and gender !=''">
                gender=#{gender}
            </if>
        </trim>
    </select>

    <!--    List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        <!--
        choose,when,otherwise
        choose可以看作switch,when可以看作case,otherwise可以看作default
        when至少设置一个，otherwise最多设置一个
        -->
        select * from t_emp
        <where>
            <choose>
                <when test="empName!=null and empName!=''">
                    emp_name=#{empName}
                </when>
                <when test="age!=null and age!=''">
                    age=#{age}
                </when>
                <when test="gender!=null and gender!=''">
                    gender=#{gender}
                </when>
                <otherwise>

                </otherwise>
            </choose>
        </where>
    </select>

    <!--    void insertMoreEmp(List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <!--
        item:collection里面的单个元素的对象名
        separator:各个元素之间的分割符
        -->
        <foreach collection="emps" item="emp" separator=","><!--若我们不用@Param("emps"),这里的collection就必须要用list,
        若如果emps是数组，则collection要用array
        因为底层是把list放在一个Map集合内，以list为键，参数值为值，-->
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--
    foreach标签的属性:
    collection:设置要循环的数组和集合
    item:用一个字符串表示数组和集合内的每一个数据
    separator:每次循环的数据之间的分割符
    open:循环的所有内容以什么开始
    close:循环的所有内容以什么结束
    -->
    <!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteMoreEmp"><!--三种方式-->
        <!--        delete from t_emp where emp_id in-->
        <!--(
        <foreach collection="empIds" item="empId" separator=",">
            #{empId}
        </foreach>
        )-->
        <!--        open:以什么开头;close:以什么结尾;这样可以去掉"()"-->
        <!--<foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>-->
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id=#{empId}
        </foreach>
    </delete>

    <!--
    sql片段:可以记录一段sql,在需要用的地方使用include标签进行引用
    <sql id="empColumns">
       emp_id,emp_name,age,gender,dept_id
    <sql>
    <include refid="empColumns"></include>
    所以可以进行下列转换：
    select * from t_emp
    转换为
    select <include refid="empColumns"></include> from t_emp
    -->
</mapper>
